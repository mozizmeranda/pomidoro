from aiogram import types, Dispatcher, Bot
import asyncio
from aiogram.types import FSInputFile, BotCommand
from config import bot_token, hour, minute
from aiogram.filters import Command
import re
from llm import gpt_v2
from api_meta_ads import save_as_mobile_html
from meta_api import _active_adsets, get_metrics_for_day, get_metrics_from_db
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
from database import *


bot = Bot(token=bot_token)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


def format_for_telegram(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""

    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'##\s*(.*)', r'*\1*', text)  # ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> *–ó–∞–≥–æ–ª–æ–≤–æ–∫*
    text = re.sub(r'#\s*(.*)', r'**\1**', text)  # # –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> **–ó–∞–≥–æ–ª–æ–≤–æ–∫**

    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –Ω–∞ —ç–º–æ–¥–∑–∏
    text = re.sub(r'^\d+\.\s*', 'üî∏ ', text, flags=re.MULTILINE)
    text = re.sub(r'^\*\s*', '‚Ä¢ ', text, flags=re.MULTILINE)
    text = re.sub(r'^-\s*', '‚Ä¢ ', text, flags=re.MULTILINE)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    # text = re.sub(r'\n\n', '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n', text)

    return text


prompt_for_auto_check = """–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ë–µ–∑ –º–æ–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç—å!
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏, –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö —è —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ —Å–≤–µ–∂–∏–µ –º–µ—Ç—Ä–∏–∫–∏. 

–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–µ—Ä–Ω–∏ —Å–≤–æ–π —Ñ–∏–¥–±–µ–∫, —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. 
–ü–æ–∫–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.
–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –º–æ–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –±—é–¥–∂–µ—Ç–∞ –∏–ª–∏ –ø–æ 
–æ—Ç–∫–ª—é—á–µ–Ω–∏—é –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
–ù–∏–∂–µ —è –Ω–∞–ø–∏—à—É –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≤—Å–µ–º –∫—Ä–µ–∞—Ç–∏–≤–∞–º."""


async def scheduled_analysis():
    chat_id = 6287458105
    active_adsets = _active_adsets()  # list()
    get_metrics_for_day()  # getting fresh auto metrics and inserting them into db
    request_text = ""
    for adset in active_adsets:
        # request_text += f"### Campaign name = {adset['name']}\n Campaign ID = {adset['id']}\n\n"
        request_text += get_metrics_from_db(adset['id'])
        request_text += "\n\n---\n\n\n"
    # print(request_text)
    full_text = prompt_for_auto_check + "\n\n" + request_text
    filename = save_as_mobile_html(full_text, 123)
    doc = FSInputFile(filename, "adset_report_123_mobile.html")
    await bot.send_document(
        chat_id=chat_id,
        document=doc,
        caption=f"üìä –û—Ç—á–µ—Ç"
    )
    r = gpt_v2(full_text)
    paragraphs = r.split("---")
    for i in paragraphs:
        await bot.send_message(chat_id=chat_id, text=format_for_telegram(i))


requests.get(f"https://api.telegram.org/bot{bot_token}/sendMessage?"
             f"chat_id=6287458105&text=123")

# asyncio.run(scheduled_analysis())


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è AI —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥.")


async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="campaigns", description="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏."),
        BotCommand(command="gpt", description="–ó–∞–ø—Ä–æ—Å –∫ GPT"),
        BotCommand(command="analyze", description="–ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏"),
    ]
    await bot.set_my_commands(commands)


@dp.message(Command("gpt"))
async def gpt_request(message: types.Message):
    t = message.text

    if t.startswith("/gpt "):
        extracted_text = t[5:]
        await message.reply(f"You asked: {extracted_text}")
        r = gpt_v2(extracted_text)
        paragraphs = r.split("---")

        for i in paragraphs:
            await message.answer(text=format_for_telegram(i))

    else:
        pass


@dp.message(Command("analyze"))
async def get_creatives(message: types.Message):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.reply("‚ùó–§–æ—Ä–º–∞—Ç: /analyze CAMPAIGN_ID \n\n[–≤–∞—à —Ç–µ–∫—Å—Ç]")
        return

    campaign_id = parts[1]
    extracted_text = parts[2] if len(parts) > 2 else ""

    metrics = get_metrics_from_db(campaign_id)
    full_text = f"{extracted_text}\n\n{metrics}"
    filename = save_as_mobile_html(metrics, 123)
    doc = FSInputFile(filename, "adset_report_123_mobile.html")
    await bot.send_document(
        chat_id=message.from_user.id,
        document=doc,
        caption=f"üìä –û—Ç—á–µ—Ç"
    )
    r = gpt_v2(full_text)
    paragraphs = r.split("---")
    for i in paragraphs:
        await message.answer(text=format_for_telegram(i))


@dp.message(Command("text"))
async def get_creatives(message: types.Message):
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /analyze CAMPAIGN_ID [–≤–∞—à —Ç–µ–∫—Å—Ç]")
        return

    campaign_id = parts[1]
    user_text = parts[2] if len(parts) > 2 else ""
    await message.reply(f"{campaign_id} -- {user_text}")


@dp.message(Command("campaigns"))
async def send_campaigns(message: types.Message):
    campaigns = db.get_campaigns()
    ans = ""
    ids = []
    for i in campaigns:
        if i[0] not in ids:
            ans += f"Name = {i[1]} -- ID = <code>{i[0]}</code>\n\n"
            ids.append(i[0])

    await message.reply(ans, parse_mode="HTML")


async def main():
    scheduler.add_job(scheduled_analysis, 'cron', hour=16, minute=30)

    scheduler.start()
    await set_commands()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
